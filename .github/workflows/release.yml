name: Release

on:
  push:
    tags:
      - 'v*.*.*'       # e.g., v1.0.0, v0.1.0
      - 'v*.*.*a*'     # e.g., v0.1.0a1 (alpha)
      - 'v*.*.*b*'     # e.g., v0.1.0b1 (beta)
      - 'v*.*.*rc*'    # e.g., v0.1.0rc1 (release candidate)

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.VERSION }}"/' pyproject.toml
        git diff pyproject.toml

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Create release body
      id: release_body
      run: |
        echo "### Installation" > RELEASE_BODY.md
        echo "" >> RELEASE_BODY.md
        echo '```bash' >> RELEASE_BODY.md
        echo 'pip install brokle==${{ steps.version.outputs.VERSION }}' >> RELEASE_BODY.md
        echo '```' >> RELEASE_BODY.md
        echo "" >> RELEASE_BODY.md
        echo "### Documentation" >> RELEASE_BODY.md
        echo "ðŸ“– **[Complete Documentation](https://github.com/brokle-ai/brokle-python/blob/main/README.md)**" >> RELEASE_BODY.md

    - name: Determine if pre-release
      id: prerelease
      run: |
        if [[ "${{ steps.version.outputs.VERSION }}" =~ (a|b|rc) ]]; then
          echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Pre-release ${{ steps.version.outputs.TAG }}" >> $GITHUB_OUTPUT
        else
          echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Release ${{ steps.version.outputs.TAG }}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: ${{ steps.prerelease.outputs.RELEASE_NAME }}
        body_path: RELEASE_BODY.md
        draft: false
        prerelease: ${{ steps.prerelease.outputs.IS_PRERELEASE }}
        generate_release_notes: true
        files: |
          dist/brokle-${{ steps.version.outputs.VERSION }}-py3-none-any.whl
          dist/brokle-${{ steps.version.outputs.VERSION }}.tar.gz


  publish-to-pypi:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.VERSION }}"/' pyproject.toml

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose